cmake_minimum_required(VERSION 3.11)
project(OmniThing)
message("Running OmniThing's CMakeLists.txt")

option(BUILD_LINUX "Build for a generic linux target" OFF)
option(BUILD_WINDOWS "Build for a windows target" OFF)
option(BUILD_RPI "Build for a raspberry pi linux target" OFF)
option(BUILD_ARDUINO "Create directory structure for Arduino IDE" OFF)

file(GLOB_RECURSE sources_core src/core/*.cpp src/core/*.c)
file(GLOB_RECURSE sources_os_common src/os_common/lib/*.cpp)
file(GLOB_RECURSE sources_rpi src/raspberry_pi/lib/*.cpp)
file(GLOB_RECURSE sources_arduino src/arduino/lib/*.cpp)

if(BUILD_LINUX)
    add_executable(OmniThing src/os_common/OmniThing.cpp ${sources_core} ${sources_os_common})
    include_directories(include/core)
    include_directories(include/os_common/lib)
    target_link_libraries(OmniThing pthread)
elseif(BUILD_RPI)
    add_executable(OmniThing src/raspberry_pi/OmniThing.cpp ${sources_core} ${sources_os_common} ${sources_rpi})
    include_directories(include/core)
    include_directories(include/os_common/lib)
    include_directories(include/raspberry_pi/lib)
    target_link_libraries(OmniThing pigpio pthread rt)
elseif(BUILD_WINDOWS)
	message("Creating Windows Build Configuration")
	add_executable(OmniThing src/os_common/OmniThing.cpp ${sources_core} ${sources_os_common})
	add_definitions(-DFOO)
	include_directories(include/core)
	include_directories(include/os_common/lib)
	set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT OmniThing)
	find_library(ws2_32_LIBRARY_PATH ws2_32)
	target_link_libraries(OmniThing ${ws2_32_LIBRARY_PATH})
endif()


#unset(BUILD_LINUX CACHE)
#unset(BUILD_WINDOWS CACHE)
#unset(BUILD_RPI CACHE)
#unset(BUILD_ARDUINO CACHE)
